# What software testing ISN'T:
<ol>
<li> A way for testers to tear apart a developer's code or debase their skills/abilities</li>
<li> Looking for every single bug and building thousands of automated cases to run for every possible scenario</li>
<li> Pressing every button randomly until something breaks</li> 
<li> Something you do after building everything</li> 
<li> Hoping something will break </li> 
</ol>


## why do software testers exist: Guarding against personal interest
Software project teams (The people doing the most collaboration or communicating over the course of the project) consist of Developers, Business Analysts, and Project Managers.
<br>
Analysts may try to "get as much requirement gathering done as fast as possible" to get more rapport as being "the fastest/best BA". 
<br>
Devs may try new functionality/apps/languages/libraries to increase their own personal market value (or marketability), 
<br>
and PMs may try to get the project done as fast as possible. 
<br>
<br>
Each of these people have their own personal interest, which affects the Quality of the software - and none of them are advocating for what the Customer/User wants or needs.
<br>
The Tester keeps them in check by ensuring that quality is upheld, and that they are creating usable software


## Why do software testers exist: The Project Team itself
The project management team (as discussed <a href="#" onclick="updateBodyText('https://raw.githubusercontent.com/Cyber-Finn/Blog/main/text/SDM/SDM.txt');">here</a>) consists of the SDM, Tech Lead and PM, but the actual Project team (people doing the work), consists of:

<ol>
<li> A Business Analyst (BA) that gathers requirements from the customer/user.</li>
<li> A Developer that builds an application that meets the requirements of the user.</li>
</ol>
That's perfect - right? We've covered all aspects of Requirements Gathering and Development!
<br>
well, no. 
<br>
How do we know the Dev will actually build the right thing? (Remember that there are sometimes massive budgets - of hundreds of millions of Dollars - sunk into each project)
<br>
How do we check this, and how do we hold them accountable if they've built subpar software?
<br>
This is where the tester comes in.
<br>
The tester acts as a bridge between the Developer and the Business Analyst, and consultant/advisor to the Project Management team.
<br>
In a nutshell: The BA gathers requirements, the Dev builds a solution that meets those requirements, and the tester checks that those requirements have actually been met.

## Why do software testers exist: Project Risk Assessment:
Business Stakeholders are the least technically-skilled, as all managers are.
<br>
This poses a challenge to them when they try to understand "how far along" a project is, how good the software will be, and if there are any risks involved with releasing the project (Their business-domain has them focus on financial/reputational damages/losses from the release of buggy/incomplete software, how many customers they'll lose, market share values, etc.).
<br>
While Stakeholders don't really care about knowing the exact quality of the software, because they aren't technical and don't have time to read through the dev's code - they do care about the overall risk of releasing the software.
<br> 
So, instead of having them read through the code, the Tester independently reports to these stakeholders on the test plan, test coverage, bugs identified, severity of bugs, etc., to help them understand what risks there are and how big they'll be. 
<br>
Ultimately, the tester doesn't (and shouldn't ever) have the power to halt or scrap projects, but they do have the authority to advise the Project management team of issues and risks.
<br>
Their job doubles as both an "Advocate for the User" and "Advisor to Business Stakeholders".


# What do Software Testers actually do?
They perform 2x very specific functions.

<ol>
<li>
Validation
<ul>
	<li>This is where they look at the app the dev has built, and the requirements the user has requested, and check that they're related.</li>
	<li>For example, a customer may have asked "I need a basic percentage calculator", but your dev has built "AES256 advanced encryption for logins using an Identity Provider service that auths logins via Kerberos Authentication on port 80"</li>
	<li>this is a very exaggerated example, but devs do often misinterpret requirements or go out of their way to build something they want.</li>
</ul></li>
<li>
Verification
<ul>
	<li>This is where they will look at HOW the app has been built. Does it have enough logical error handling, what happens if we pass in a string instead of a number, how well does it perform under load/stress, what happens if memory is exhausted, etc.</li>
	<li>They will basically test the code that the dev has written, to verify that it is of acceptable quality and is ready for market</li>
	<li>This type of testing can be split up into different approaches, like black-box testing, manual vs scripted/automated, regression testing, etc. </li>
</ul></li>
</ol>

# Types of Testing

## What is Regression Testing, and how does it differ from regular testing?
Regression testing ensures that recent code changes haven’t negatively impacted existing functionalities. 
<br>
It’s performed after bug fixes, new features, or performance improvements to confirm that the existing/old software still works as expected.
<br>
Basically, we go back and retest EVERYTHING (we REGRESS to the first test cycles).
<br>
This is usually done via automated scripts.

<ol>
	<li> Purpose
		<ul>
			<li>Regular Testing: Focuses on verifying new features or functionalities to ensure they work correctly</li>
			<li>Regression Testing: Ensures that existing features continue to function correctly after changes are made</li>
		</ul>
	</li>
	<li> Scope
		<ul>
			<li>Regular Testing: Typically targets specific new features or components.</li>
			<li>Regression Testing: Covers both new and existing features to detect any unintended side effects of recent changes</li>
		</ul>
	</li>
	<li> Frequency
		<ul>
			<li>Regular Testing: Conducted during initial development phases or when new features are added</li>
			<li>Regression Testing: Performed continuously throughout the development lifecycle, especially after any code changes</li>
		</ul>
	</li>
	<li> Automation
		<ul>
			<li>Regular Testing: Can be manual or automated, depending on the complexity and requirements</li>
			<li>Regression Testing: Often automated to efficiently retest large parts of the application</li>
		</ul>
	</li>
</ol>